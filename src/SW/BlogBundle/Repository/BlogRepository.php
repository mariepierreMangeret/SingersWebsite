<?php

namespace SW\BlogBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * BlogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogRepository extends \Doctrine\ORM\EntityRepository
{
	public function myBlogs($page, $nbPerPage) {
   		$query = $this->_em->createQuery('
			SELECT n FROM SWBlogBundle:Blog n
			ORDER BY n.id DESC');

		$query
		->setFirstResult(($page-1) * $nbPerPage)
		->setMaxResults($nbPerPage);

		return new Paginator($query, true);
	}

	public function getDateArchive()
	{
  	    $query = $this->_em->createQuery('
  	    SELECT b.created, MONTH(b.created) + YEAR(b.created) AS HIDDEN groupDate
  	    FROM SWBlogBundle:Blog b
  		GROUP BY groupDate
  		ORDER BY b.created DESC');

  		//var_dump($query->getResult()); 
  	    return $query->getResult();
	}

	public function getArchive($year, $month, $page, $nbPerPage)
	{
  	    $query = $this->_em->createQuery('
  	    SELECT b, MONTH(b.created) + YEAR(b.created) AS HIDDEN groupDate
  	    FROM SWBlogBundle:Blog b
  	    WHERE MONTH(b.created) = :month
  	    AND YEAR(b.created) = :year
  	    ORDER BY b.created DESC')
  	    ->setParameter('month', $month)
  	    ->setParameter('year', $year);

		$query
		->setFirstResult(($page-1) * $nbPerPage)
		->setMaxResults($nbPerPage);

		return new Paginator($query, true);
	}

	public function getSearch($search, $page, $nbPerPage)
	{

  	    $query = $this->_em->createQuery('
  	    SELECT b
  	    FROM SWBlogBundle:Blog b
  	    WHERE b.title LIKE :search
  	    ORDER BY b.created DESC')
  	    ->setParameter('search', '%'.$search.'%');

		$query
		->setFirstResult(($page-1) * $nbPerPage)
		->setMaxResults($nbPerPage);

		return new Paginator($query, true);
	}
}
